{
    "docs": [
        {
            "location": "/", 
            "text": "Intro\n\n\nGitlint is a git commit message linter written in python: it checks your commit messages for style.\n\n\nGreat for use as a \ncommit-msg\n git hook or as part of your gating script in a CI/CD pipeline (e.g. jenkins).\n\n\n\n\n\nMany of the gitlint validations are based on\n\nwell-known\n,\n\ncommunity\n,\n\nstandards\n, others are based on checks that we've found\nuseful throughout the years. Gitlint has sane defaults, but\n\nyou can also easily customize it to your own liking\n.\n\n\nGitlint supports python versions 2.6, 2.7 and 3.3+.\nIf you are looking for an alternative written in a different language, have a look at\n\nfit-commit\n (Ruby) or\n\nnode-commit-msg\n (Node.js).\n\n\nGetting Started\n\n\n# Install gitlint\npip install gitlint\n\n# Check the last commit message\ngitlint\n# Alternatively, pipe a commit message to gitlint:\ncat examples/commit-message-1 | gitlint\n# or\ngit log -1 --pretty=%B | gitlint\n\n# To install a gitlint as a commit-msg git hook:\ngitlint install-hook\n\n\n\n\nOutput example:\n\n\n$ cat examples/commit-message-2 | gitlint\n1: T1 Title exceeds max length (134\n80): \nThis is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping  \n\n1: T2 Title has trailing whitespace: \nThis is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping  \n\n1: T4 Title contains hard tab characters (\\t): \nThis is the title of a commit message that  is over 80 characters and contains hard tabs and trailing whitespace and the word wiping  \n\n2: B4 Second line is not empty: \nThis line should not contain text\n\n3: B1 Line exceeds max length (125\n80): \nLines typically need to have   a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120. \n\n3: B2 Line has trailing whitespace: \nLines typically need to have   a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120. \n\n3: B3 Line contains hard tab characters (\\t): \nLines typically need to have     a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120. \n\n\n\n\n\nNOTE: The returned exit code equals the number of errors found. \nSome exit codes are special\n.\n\n\nFor a list of available rules and their configuration options, have a look at the \nRules\n page.\n\n\nThe \nConfiguration\n page explains how you can modify gitlint's runtime behavior via command-line\nflags, a \n.gitlint\n configuration file or on a per commit basis.\n\n\nAs a simple example, you can modify gitlint's verbosity using the \n-v\n flag, like so:\n\n\n$ cat examples/commit-message-2 | gitlint -v\n1: T1\n1: T2\n[removed output]\n$ cat examples/commit-message-2 | gitlint -vv\n1: T1 Title exceeds max length (134\n80)\n1: T2 Title has trailing whitespace\n1: T4 Title contains hard tab characters (\\t)\n[removed output]\n$ cat examples/commit-message-2 | gitlint -vvv\n1: T1 Title exceeds max length (134\n80): \nThis is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping  \n\n1: T2 Title has trailing whitespace: \nThis is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping  \n\n[removed output]\n\n\n\n\nThe default verbosity is \n-vvv\n.\n\n\nOther commands and variations:\n\n\nUsage: gitlint [OPTIONS] COMMAND [ARGS]...\n\n  Git lint tool, checks your git commit messages for styling issues\n\nOptions:\n  --target DIRECTORY  Path of the target git repository. [default: current\n                      working directory]\n  -C, --config PATH   Config file location [default: .gitlint]\n  -c TEXT             Config flags in format \nrule\n.\noption\n=\nvalue\n (e.g.: -c\n                      T1.line-length=80). Flag can be used multiple times to\n                      set multiple config values.\n  --ignore TEXT       Ignore rules (comma-separated by id or name).\n  -v, --verbose       Verbosity, more v's for more verbose output (e.g.: -v,\n                      -vv, -vvv). [default: -vvv]\n  -s, --silent        Silent mode (no output). Takes precedence over -v, -vv,\n                      -vvv.\n  --version           Show the version and exit.\n  --help              Show this message and exit.\n\nCommands:\n  generate-config  Generates a sample gitlint config file.\n  install-hook     Install gitlint as a git commit-msg hook.\n  lint             Lints a git repository [default command]\n  uninstall-hook   Uninstall gitlint commit-msg hook.\n\n  When no COMMAND is specified, gitlint defaults to 'gitlint lint'.\n\n\n\n\nUsing gitlint as a commit-msg hook\n\n\nYou can also install gitlint as a git \ncommit-msg\n hook so that gitlint checks your commit messages automatically\nafter each commit.\n\n\ngitlint install-hook\n# To remove the hook\ngitlint uninstall-hook\n\n\n\n\nImportant: Gitlint cannot work together with an existing hook. If you already have a \n.git/hooks/commit-msg\n\nfile in your local repository, gitlint will refuse to install the \ncommit-msg\n hook. gitlint will also only\nuninstall unmodified commit-msg hooks that were installed by gitlint.\n\n\nMerge commits\n\n\nAs of version 0.7.0, gitlint ignores merge commits by default. The rationale behind this is that in many cases\nmerge commits are not created by users themselves but by tools such as github,\n\ngerrit\n and others. These tools often generate merge commit messages that\nviolate gitlint's set of rules and it's not always convenient or desired to change those.\n\n\nIn case you \ndo\n want to lint merge commit messages, you can disable this behavior by setting the\ngeneral \nignore-merge-commits\n option to \nfalse\n\n\nusing one of the various ways to configure gitlint\n.\n\n\nExit codes\n\n\nGitlint uses the exit code as a simple way to indicate the number of violations found.\nSome exit codes are used to indicate special errors as indicated in the table below.\n\n\nBecause of these special error codes and the fact that\n\nbash only supports exit codes between 0 and 255\n, the maximum number\nof violations counted by the exit code is 252. Note that gitlint does not have a limit on the number of violations\nit can detect, it will just always return with exit code 252 when the number of violations is greater than or equal\nto 252.\n\n\n\n\n\n\n\n\nExit Code\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n253\n\n\nWrong invocation of the \ngitlint\n command.\n\n\n\n\n\n\n254\n\n\nSomething went wrong when invoking git.\n\n\n\n\n\n\n255\n\n\nInvalid gitlint configuration", 
            "title": "Home"
        }, 
        {
            "location": "/#intro", 
            "text": "Gitlint is a git commit message linter written in python: it checks your commit messages for style.  Great for use as a  commit-msg  git hook or as part of your gating script in a CI/CD pipeline (e.g. jenkins).   Many of the gitlint validations are based on well-known , community , standards , others are based on checks that we've found\nuseful throughout the years. Gitlint has sane defaults, but you can also easily customize it to your own liking .  Gitlint supports python versions 2.6, 2.7 and 3.3+.\nIf you are looking for an alternative written in a different language, have a look at fit-commit  (Ruby) or node-commit-msg  (Node.js).", 
            "title": "Intro"
        }, 
        {
            "location": "/#getting-started", 
            "text": "# Install gitlint\npip install gitlint\n\n# Check the last commit message\ngitlint\n# Alternatively, pipe a commit message to gitlint:\ncat examples/commit-message-1 | gitlint\n# or\ngit log -1 --pretty=%B | gitlint\n\n# To install a gitlint as a commit-msg git hook:\ngitlint install-hook  Output example:  $ cat examples/commit-message-2 | gitlint\n1: T1 Title exceeds max length (134 80):  This is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping   \n1: T2 Title has trailing whitespace:  This is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping   \n1: T4 Title contains hard tab characters (\\t):  This is the title of a commit message that  is over 80 characters and contains hard tabs and trailing whitespace and the word wiping   \n2: B4 Second line is not empty:  This line should not contain text \n3: B1 Line exceeds max length (125 80):  Lines typically need to have   a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120.  \n3: B2 Line has trailing whitespace:  Lines typically need to have   a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120.  \n3: B3 Line contains hard tab characters (\\t):  Lines typically need to have     a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120.    NOTE: The returned exit code equals the number of errors found.  Some exit codes are special .  For a list of available rules and their configuration options, have a look at the  Rules  page.  The  Configuration  page explains how you can modify gitlint's runtime behavior via command-line\nflags, a  .gitlint  configuration file or on a per commit basis.  As a simple example, you can modify gitlint's verbosity using the  -v  flag, like so:  $ cat examples/commit-message-2 | gitlint -v\n1: T1\n1: T2\n[removed output]\n$ cat examples/commit-message-2 | gitlint -vv\n1: T1 Title exceeds max length (134 80)\n1: T2 Title has trailing whitespace\n1: T4 Title contains hard tab characters (\\t)\n[removed output]\n$ cat examples/commit-message-2 | gitlint -vvv\n1: T1 Title exceeds max length (134 80):  This is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping   \n1: T2 Title has trailing whitespace:  This is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping   \n[removed output]  The default verbosity is  -vvv .  Other commands and variations:  Usage: gitlint [OPTIONS] COMMAND [ARGS]...\n\n  Git lint tool, checks your git commit messages for styling issues\n\nOptions:\n  --target DIRECTORY  Path of the target git repository. [default: current\n                      working directory]\n  -C, --config PATH   Config file location [default: .gitlint]\n  -c TEXT             Config flags in format  rule . option = value  (e.g.: -c\n                      T1.line-length=80). Flag can be used multiple times to\n                      set multiple config values.\n  --ignore TEXT       Ignore rules (comma-separated by id or name).\n  -v, --verbose       Verbosity, more v's for more verbose output (e.g.: -v,\n                      -vv, -vvv). [default: -vvv]\n  -s, --silent        Silent mode (no output). Takes precedence over -v, -vv,\n                      -vvv.\n  --version           Show the version and exit.\n  --help              Show this message and exit.\n\nCommands:\n  generate-config  Generates a sample gitlint config file.\n  install-hook     Install gitlint as a git commit-msg hook.\n  lint             Lints a git repository [default command]\n  uninstall-hook   Uninstall gitlint commit-msg hook.\n\n  When no COMMAND is specified, gitlint defaults to 'gitlint lint'.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#using-gitlint-as-a-commit-msg-hook", 
            "text": "You can also install gitlint as a git  commit-msg  hook so that gitlint checks your commit messages automatically\nafter each commit.  gitlint install-hook\n# To remove the hook\ngitlint uninstall-hook  Important: Gitlint cannot work together with an existing hook. If you already have a  .git/hooks/commit-msg \nfile in your local repository, gitlint will refuse to install the  commit-msg  hook. gitlint will also only\nuninstall unmodified commit-msg hooks that were installed by gitlint.", 
            "title": "Using gitlint as a commit-msg hook"
        }, 
        {
            "location": "/#merge-commits", 
            "text": "As of version 0.7.0, gitlint ignores merge commits by default. The rationale behind this is that in many cases\nmerge commits are not created by users themselves but by tools such as github, gerrit  and others. These tools often generate merge commit messages that\nviolate gitlint's set of rules and it's not always convenient or desired to change those.  In case you  do  want to lint merge commit messages, you can disable this behavior by setting the\ngeneral  ignore-merge-commits  option to  false  using one of the various ways to configure gitlint .", 
            "title": "Merge commits"
        }, 
        {
            "location": "/#exit-codes", 
            "text": "Gitlint uses the exit code as a simple way to indicate the number of violations found.\nSome exit codes are used to indicate special errors as indicated in the table below.  Because of these special error codes and the fact that bash only supports exit codes between 0 and 255 , the maximum number\nof violations counted by the exit code is 252. Note that gitlint does not have a limit on the number of violations\nit can detect, it will just always return with exit code 252 when the number of violations is greater than or equal\nto 252.     Exit Code  Description      253  Wrong invocation of the  gitlint  command.    254  Something went wrong when invoking git.    255  Invalid gitlint configuration", 
            "title": "Exit codes"
        }, 
        {
            "location": "/rules/", 
            "text": "Overview\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nT1\n\n\ntitle-max-length\n\n\n= 0.1\n\n\nTitle length must be \n 72 chars.\n\n\n\n\n\n\nT2\n\n\ntitle-trailing-whitespace\n\n\n= 0.1\n\n\nTitle cannot have trailing whitespace (space or tab)\n\n\n\n\n\n\nT3\n\n\ntitle-trailing-punctuation\n\n\n= 0.1\n\n\nTitle cannot have trailing punctuation (?:!.,;)\n\n\n\n\n\n\nT4\n\n\ntitle-hard-tab\n\n\n= 0.1\n\n\nTitle cannot contain hard tab characters (\\t)\n\n\n\n\n\n\nT5\n\n\ntitle-must-not-contain-word\n\n\n= 0.1\n\n\nTitle cannot contain certain words (default: \"WIP\")\n\n\n\n\n\n\nT6\n\n\ntitle-leading-whitespace\n\n\n= 0.4\n\n\nTitle cannot have leading whitespace (space or tab)\n\n\n\n\n\n\nT7\n\n\ntitle-match-regex\n\n\n= 0.5\n\n\nTitle must match a given regex (default: .*)\n\n\n\n\n\n\nB1\n\n\nbody-max-line-length\n\n\n= 0.1\n\n\nLines in the body must be \n 80 chars\n\n\n\n\n\n\nB2\n\n\nbody-trailing-whitespace\n\n\n= 0.1\n\n\nBody cannot have trailing whitespace (space or tab)\n\n\n\n\n\n\nB3\n\n\nbody-hard-tab\n\n\n= 0.1\n\n\nBody cannot contain hard tab characters (\\t)\n\n\n\n\n\n\nB4\n\n\nbody-first-line-empty\n\n\n= 0.1\n\n\nFirst line of the body (second line of commit message) must be empty\n\n\n\n\n\n\nB5\n\n\nbody-min-length\n\n\n= 0.4\n\n\nBody length must be at least 20 characters\n\n\n\n\n\n\nB6\n\n\nbody-is-missing\n\n\n= 0.4\n\n\nBody message must be specified\n\n\n\n\n\n\nB7\n\n\nbody-changed-file-mention\n\n\n= 0.4\n\n\nBody must contain references to certain files if those files are changed in the last commit\n\n\n\n\n\n\n\n\nT1: title-max-length\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nT1\n\n\ntitle-max-length\n\n\n= 0.1\n\n\nTitle length must be \n 72 chars.\n\n\n\n\n\n\n\n\nOptions\n\n\n\n\n\n\n\n\nName\n\n\ngitlint version\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nline-length\n\n\n= 0.2\n\n\n72\n\n\nMaximum allowed title length\n\n\n\n\n\n\n\n\nT2: title-trailing-whitespace\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nT2\n\n\ntitle-trailing-whitespace\n\n\n= 0.1\n\n\nTitle cannot have trailing whitespace (space or tab)\n\n\n\n\n\n\n\n\nT3: title-trailing-punctuation\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nT3\n\n\ntitle-trailing-punctuation\n\n\n= 0.1\n\n\nTitle cannot have trailing punctuation (?:!.,;)\n\n\n\n\n\n\n\n\nT4: title-hard-tab\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nT4\n\n\ntitle-hard-tab\n\n\n= 0.1\n\n\nTitle cannot contain hard tab characters (\\t)\n\n\n\n\n\n\n\n\nT5: title-must-not-contain-word\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nT5\n\n\ntitle-must-not-contain-word\n\n\n= 0.1\n\n\nTitle cannot contain certain words (default: \"WIP\")\n\n\n\n\n\n\n\n\nOptions\n\n\n\n\n\n\n\n\nName\n\n\ngitlint version\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwords\n\n\n= 0.3\n\n\nWIP\n\n\nComma-separated list of words that should not be used in the title. Matching is case insensitive\n\n\n\n\n\n\n\n\nT6: title-leading-whitespace\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nT6\n\n\ntitle-leading-whitespace\n\n\n= 0.4\n\n\nTitle cannot have leading whitespace (space or tab)\n\n\n\n\n\n\n\n\nT7: title-match-regex\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nT7\n\n\ntitle-match-regex\n\n\n= 0.5\n\n\nTitle must match a given regex (default: .*)\n\n\n\n\n\n\n\n\nOptions\n\n\n\n\n\n\n\n\nName\n\n\ngitlint version\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nregex\n\n\n= 0.5\n\n\n.*\n\n\nPython-style regular expression\n that the title should match.\n\n\n\n\n\n\n\n\nB1: body-max-line-length\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nB1\n\n\nbody-max-line-length\n\n\n= 0.1\n\n\nLines in the body must be \n 80 chars\n\n\n\n\n\n\n\n\nOptions\n\n\n\n\n\n\n\n\nName\n\n\ngitlint version\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nline-length\n\n\n= 0.2\n\n\n80\n\n\nMaximum allowed line length in the commit message body\n\n\n\n\n\n\n\n\nB2: body-trailing-whitespace\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nB2\n\n\nbody-trailing-whitespace\n\n\n= 0.1\n\n\nBody cannot have trailing whitespace (space or tab)\n\n\n\n\n\n\n\n\nB3: body-hard-tab\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nB3\n\n\nbody-hard-tab\n\n\n= 0.1\n\n\nBody cannot contain hard tab characters (\\t)\n\n\n\n\n\n\n\n\nB4: body-first-line-empty\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nB4\n\n\nbody-first-line-empty\n\n\n= 0.1\n\n\nFirst line of the body (second line of commit message) must be empty\n\n\n\n\n\n\n\n\nB5: body-min-length\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nB5\n\n\nbody-min-length\n\n\n= 0.4\n\n\nBody length must be at least 20 characters\n\n\n\n\n\n\n\n\nOptions\n\n\n\n\n\n\n\n\nName\n\n\ngitlint version\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmin-length\n\n\n= 0.4\n\n\n20\n\n\nMinimum number of required characters in body\n\n\n\n\n\n\n\n\nB6: body-is-missing\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nB6\n\n\nbody-is-missing\n\n\n= 0.4\n\n\nBody message must be specified\n\n\n\n\n\n\n\n\nOptions\n\n\n\n\n\n\n\n\nName\n\n\ngitlint version\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nignore-merge-commits\n\n\n= 0.4\n\n\ntrue\n\n\nWhether this rule should be ignored during merge commits. Allowed values: true,false.\n\n\n\n\n\n\n\n\nB7: body-changed-file-mention\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\ngitlint version\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nB7\n\n\nbody-changed-file-mention\n\n\n= 0.4\n\n\nBody must contain references to certain files if those files are changed in the last commit\n\n\n\n\n\n\n\n\nOptions\n\n\n\n\n\n\n\n\nName\n\n\ngitlint version\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfiles\n\n\n= 0.4\n\n\n(empty)\n\n\nComma-separated list of files that need to an explicit mention in the commit message in case they are changed.", 
            "title": "Rules"
        }, 
        {
            "location": "/rules/#overview", 
            "text": "ID  Name  gitlint version  Description      T1  title-max-length  = 0.1  Title length must be   72 chars.    T2  title-trailing-whitespace  = 0.1  Title cannot have trailing whitespace (space or tab)    T3  title-trailing-punctuation  = 0.1  Title cannot have trailing punctuation (?:!.,;)    T4  title-hard-tab  = 0.1  Title cannot contain hard tab characters (\\t)    T5  title-must-not-contain-word  = 0.1  Title cannot contain certain words (default: \"WIP\")    T6  title-leading-whitespace  = 0.4  Title cannot have leading whitespace (space or tab)    T7  title-match-regex  = 0.5  Title must match a given regex (default: .*)    B1  body-max-line-length  = 0.1  Lines in the body must be   80 chars    B2  body-trailing-whitespace  = 0.1  Body cannot have trailing whitespace (space or tab)    B3  body-hard-tab  = 0.1  Body cannot contain hard tab characters (\\t)    B4  body-first-line-empty  = 0.1  First line of the body (second line of commit message) must be empty    B5  body-min-length  = 0.4  Body length must be at least 20 characters    B6  body-is-missing  = 0.4  Body message must be specified    B7  body-changed-file-mention  = 0.4  Body must contain references to certain files if those files are changed in the last commit", 
            "title": "Overview"
        }, 
        {
            "location": "/rules/#t1-title-max-length", 
            "text": "ID  Name  gitlint version  Description      T1  title-max-length  = 0.1  Title length must be   72 chars.     Options     Name  gitlint version  Default  Description      line-length  = 0.2  72  Maximum allowed title length", 
            "title": "T1: title-max-length"
        }, 
        {
            "location": "/rules/#t2-title-trailing-whitespace", 
            "text": "ID  Name  gitlint version  Description      T2  title-trailing-whitespace  = 0.1  Title cannot have trailing whitespace (space or tab)", 
            "title": "T2: title-trailing-whitespace"
        }, 
        {
            "location": "/rules/#t3-title-trailing-punctuation", 
            "text": "ID  Name  gitlint version  Description      T3  title-trailing-punctuation  = 0.1  Title cannot have trailing punctuation (?:!.,;)", 
            "title": "T3: title-trailing-punctuation"
        }, 
        {
            "location": "/rules/#t4-title-hard-tab", 
            "text": "ID  Name  gitlint version  Description      T4  title-hard-tab  = 0.1  Title cannot contain hard tab characters (\\t)", 
            "title": "T4: title-hard-tab"
        }, 
        {
            "location": "/rules/#t5-title-must-not-contain-word", 
            "text": "ID  Name  gitlint version  Description      T5  title-must-not-contain-word  = 0.1  Title cannot contain certain words (default: \"WIP\")     Options     Name  gitlint version  Default  Description      words  = 0.3  WIP  Comma-separated list of words that should not be used in the title. Matching is case insensitive", 
            "title": "T5: title-must-not-contain-word"
        }, 
        {
            "location": "/rules/#t6-title-leading-whitespace", 
            "text": "ID  Name  gitlint version  Description      T6  title-leading-whitespace  = 0.4  Title cannot have leading whitespace (space or tab)", 
            "title": "T6: title-leading-whitespace"
        }, 
        {
            "location": "/rules/#t7-title-match-regex", 
            "text": "ID  Name  gitlint version  Description      T7  title-match-regex  = 0.5  Title must match a given regex (default: .*)     Options     Name  gitlint version  Default  Description      regex  = 0.5  .*  Python-style regular expression  that the title should match.", 
            "title": "T7: title-match-regex"
        }, 
        {
            "location": "/rules/#b1-body-max-line-length", 
            "text": "ID  Name  gitlint version  Description      B1  body-max-line-length  = 0.1  Lines in the body must be   80 chars     Options     Name  gitlint version  Default  Description      line-length  = 0.2  80  Maximum allowed line length in the commit message body", 
            "title": "B1: body-max-line-length"
        }, 
        {
            "location": "/rules/#b2-body-trailing-whitespace", 
            "text": "ID  Name  gitlint version  Description      B2  body-trailing-whitespace  = 0.1  Body cannot have trailing whitespace (space or tab)", 
            "title": "B2: body-trailing-whitespace"
        }, 
        {
            "location": "/rules/#b3-body-hard-tab", 
            "text": "ID  Name  gitlint version  Description      B3  body-hard-tab  = 0.1  Body cannot contain hard tab characters (\\t)", 
            "title": "B3: body-hard-tab"
        }, 
        {
            "location": "/rules/#b4-body-first-line-empty", 
            "text": "ID  Name  gitlint version  Description      B4  body-first-line-empty  = 0.1  First line of the body (second line of commit message) must be empty", 
            "title": "B4: body-first-line-empty"
        }, 
        {
            "location": "/rules/#b5-body-min-length", 
            "text": "ID  Name  gitlint version  Description      B5  body-min-length  = 0.4  Body length must be at least 20 characters     Options     Name  gitlint version  Default  Description      min-length  = 0.4  20  Minimum number of required characters in body", 
            "title": "B5: body-min-length"
        }, 
        {
            "location": "/rules/#b6-body-is-missing", 
            "text": "ID  Name  gitlint version  Description      B6  body-is-missing  = 0.4  Body message must be specified     Options     Name  gitlint version  Default  Description      ignore-merge-commits  = 0.4  true  Whether this rule should be ignored during merge commits. Allowed values: true,false.", 
            "title": "B6: body-is-missing"
        }, 
        {
            "location": "/rules/#b7-body-changed-file-mention", 
            "text": "ID  Name  gitlint version  Description      B7  body-changed-file-mention  = 0.4  Body must contain references to certain files if those files are changed in the last commit     Options     Name  gitlint version  Default  Description      files  = 0.4  (empty)  Comma-separated list of files that need to an explicit mention in the commit message in case they are changed.", 
            "title": "B7: body-changed-file-mention"
        }, 
        {
            "location": "/configuration/", 
            "text": "Config files\n\n\nYou can modify gitlint's behavior by adding a \n.gitlint\n file to your git repository.\n\n\nGenerate a default \n.gitlint\n config file by running:\n\n\ngitlint generate-config\n\n\n\n\nYou can also use a different config file like so:\n\n\ngitlint --config myconfigfile.ini \n\n\n\n\nThe block below shows a sample \n.gitlint\n file. Details about rule config options can be found on the \nRules\n page.\n\n\n# All these sections are optional, edit this file as you like.\n[general]\nignore=title-trailing-punctuation, T3\n# verbosity should be a value between 1 and 3, the commandline -v flags take precedence over this\nverbosity = 2\n# By default gitlint will ignore merge commits. Set to 'false' to disable.\nignore-merge-commits=true\n\n\n[title-max-length]\nline-length=20\n\n[title-must-not-contain-word]\n# Comma-separated list of words that should not occur in the title. Matching is case\n# insensitive. It's fine if the keyword occurs as part of a larger word (so \nWIPING\n\n# will not cause a violation, but \nWIP: my title\n will.\nwords=wip,title\n\n[title-match-regex]\n# python like regex (https://docs.python.org/2/library/re.html) that the\n# commit-msg title must be matched to.\n# Note that the regex can contradict with other rules if not used correctly\n# (e.g. title-must-not-contain-word).\nregex=^US[0-9]*\n\n[B1]\n# B1 = body-max-line-length\nline-length=30\n\n[body-min-length]\nmin-length=5\n\n[body-is-missing]\n# Whether to ignore this rule on merge commits (which typically only have a title)\n# default = True\nignore-merge-commits=false\n\n[body-changed-file-mention]\n# List of files that need to be explicitly mentioned in the body when they are changed\n# This is useful for when developers often erroneously edit certain files or git submodules.\n# By specifying this rule, developers can only change the file when they explicitly reference\n# it in the commit message.\nfiles=gitlint/rules.py,README.md\n\n\n\n\nCommandline config\n\n\nYou can also use one or more \n-c\n flags like so:\n\n\n$ gitlint -c general.verbosity=2 -c title-max-length.line-length=80 -c B1.line-length=100\n\n\n\n\nThe generic config flag format is \n-c \nrule\n.\noption\n=\nvalue\n and supports all the same rules and options which \nyou can also use in a \n.gitlint\n config file.\n\n\nCommit specific config\n\n\nYou can also disable gitlint for specific commit messages by adding \ngitlint-ignore: all\n to the commit\nmessage like so:\n\n\nWIP: This is my commit message\n\nI want gitlint to ignore this entire commit message.\ngitlint-ignore: all\n\n\n\n\ngitlint-ignore: all\n can occur on any line, as long as it is at the start of the line. You can also specify\nspecific rules to be ignored as follows: \ngitlint-ignore: T1, body-hard-tab\n.\n\n\nConfiguration precedence\n\n\nConfiguring gitlint happens the following order of precedence:\n\n\n\n\nCommit specific config (e.g.: \ngitlint-ignore: all\n in the commit message) \n\n\nCommandline convenience flags (e.g.:  \n-vv\n, \n--silent\n, \n--ignore\n)\n\n\nCommandline configuration flags (e.g.: \n-c title-max-length=123\n)\n\n\nConfiguration file (local \n.gitlint\n file, or file specified using \n-C\n/\n--config\n)\n\n\nDefault gitlint config", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#config-files", 
            "text": "You can modify gitlint's behavior by adding a  .gitlint  file to your git repository.  Generate a default  .gitlint  config file by running:  gitlint generate-config  You can also use a different config file like so:  gitlint --config myconfigfile.ini   The block below shows a sample  .gitlint  file. Details about rule config options can be found on the  Rules  page.  # All these sections are optional, edit this file as you like.\n[general]\nignore=title-trailing-punctuation, T3\n# verbosity should be a value between 1 and 3, the commandline -v flags take precedence over this\nverbosity = 2\n# By default gitlint will ignore merge commits. Set to 'false' to disable.\nignore-merge-commits=true\n\n\n[title-max-length]\nline-length=20\n\n[title-must-not-contain-word]\n# Comma-separated list of words that should not occur in the title. Matching is case\n# insensitive. It's fine if the keyword occurs as part of a larger word (so  WIPING \n# will not cause a violation, but  WIP: my title  will.\nwords=wip,title\n\n[title-match-regex]\n# python like regex (https://docs.python.org/2/library/re.html) that the\n# commit-msg title must be matched to.\n# Note that the regex can contradict with other rules if not used correctly\n# (e.g. title-must-not-contain-word).\nregex=^US[0-9]*\n\n[B1]\n# B1 = body-max-line-length\nline-length=30\n\n[body-min-length]\nmin-length=5\n\n[body-is-missing]\n# Whether to ignore this rule on merge commits (which typically only have a title)\n# default = True\nignore-merge-commits=false\n\n[body-changed-file-mention]\n# List of files that need to be explicitly mentioned in the body when they are changed\n# This is useful for when developers often erroneously edit certain files or git submodules.\n# By specifying this rule, developers can only change the file when they explicitly reference\n# it in the commit message.\nfiles=gitlint/rules.py,README.md", 
            "title": "Config files"
        }, 
        {
            "location": "/configuration/#commandline-config", 
            "text": "You can also use one or more  -c  flags like so:  $ gitlint -c general.verbosity=2 -c title-max-length.line-length=80 -c B1.line-length=100  The generic config flag format is  -c  rule . option = value  and supports all the same rules and options which \nyou can also use in a  .gitlint  config file.", 
            "title": "Commandline config"
        }, 
        {
            "location": "/configuration/#commit-specific-config", 
            "text": "You can also disable gitlint for specific commit messages by adding  gitlint-ignore: all  to the commit\nmessage like so:  WIP: This is my commit message\n\nI want gitlint to ignore this entire commit message.\ngitlint-ignore: all  gitlint-ignore: all  can occur on any line, as long as it is at the start of the line. You can also specify\nspecific rules to be ignored as follows:  gitlint-ignore: T1, body-hard-tab .", 
            "title": "Commit specific config"
        }, 
        {
            "location": "/configuration/#configuration-precedence", 
            "text": "Configuring gitlint happens the following order of precedence:   Commit specific config (e.g.:  gitlint-ignore: all  in the commit message)   Commandline convenience flags (e.g.:   -vv ,  --silent ,  --ignore )  Commandline configuration flags (e.g.:  -c title-max-length=123 )  Configuration file (local  .gitlint  file, or file specified using  -C / --config )  Default gitlint config", 
            "title": "Configuration precedence"
        }, 
        {
            "location": "/contributing/", 
            "text": "We'd love for you to \ncontribute to gitlint\n.\nJust create an issue or open a pull request and we'll get right on it!\nWe maintain a \nwishlist on our wiki\n,\nbut we're obviously open to any suggestions!\n\n\nDevelopment\n\n\nThere is a Vagrantfile in this repository that can be used for development.\n\n\nvagrant up\nvagrant ssh\n\n\n\n\nOr you can choose to use your local environment:\n\n\nvirtualenv .venv\npip install -r requirements.txt -r test-requirements.txt -r doc-requirements.txt\npython setup.py develop\n\n\n\n\nTo run tests:\n\n\n./run_tests.sh                       # run unit tests and print test coverage\n./run_tests.sh --no-coverage         # run unit tests without test coverage\n./run_tests.sh --integration         # Run integration tests (requires that you have gitlint installed)\n./run_tests.sh --pep8                # pep8 checks\n./run_tests.sh --stats               # print some code stats\n./run_tests.sh --git                 # inception: run gitlint against itself\n./run_tests.sh --lint                # run pylint checks\n\n\n\n\nTo see the package description in HTML format\n\n\npip install docutils\nexport LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\npython setup.py --long-description | rst2html.py \n output.html\n\n\n\n\nDocumentation\n\n\nOutside the vagrant box (on your host machine):\n\n\nmkdocs serve\n\n\n\n\nThen access the documentation website on your host machine on \nhttp://localhost:8000\n.", 
            "title": "Contributing"
        }
    ]
}