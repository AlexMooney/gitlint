{
    "docs": [
        {
            "location": "/", 
            "text": "Intro\n\n\nGitlint is a git commit message linter written in python: it checks your commit messages for style.\n\n\nGreat for use as a \ncommit-msg\n git hook or as part of your gating script in a CI/CD pipeline (e.g. jenkins).\n\n\n\n\n\nMany of the gitlint validations are based on\n\nwell-known\n,\n\ncommunity\n,\n\nstandards\n, others are based on checks that we've found\nuseful throughout the years. Gitlint has sane defaults, but you can also easily customize it to your own liking.\n\n\nIf you are looking for an alternative written in Ruby, have a look at\n\nfit-commit\n.\n\n\nGetting Started\n\n\n# Install gitlint\npip install gitlint\n\n# Check the last commit message\ngitlint\n# Alternatively, pipe a commit message to gitlint:\ncat examples/commit-message-1 | gitlint\n# or\ngit log -1 --pretty=%B | gitlint\n\n# To install a gitlint as a commit-msg git hook:\ngitlint --install-hook\n\n\n\n\nOutput example:\n\n\n$ cat examples/commit-message-2 | gitlint\n1: T1 Title exceeds max length (134\n80): \nThis is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping  \n\n1: T2 Title has trailing whitespace: \nThis is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping  \n\n1: T4 Title contains hard tab characters (\\t): \nThis is the title of a commit message that  is over 80 characters and contains hard tabs and trailing whitespace and the word wiping  \n\n2: B4 Second line is not empty: \nThis line should not contain text\n\n3: B1 Line exceeds max length (125\n80): \nLines typically need to have   a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120. \n\n3: B2 Line has trailing whitespace: \nLines typically need to have   a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120. \n\n3: B3 Line contains hard tab characters (\\t): \nLines typically need to have     a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120. \n\n\n\n\n\nNOTE: The returned exit code equals the number of errors found. \nSome exit codes are special\n.\n\n\nYou can modify verbosity using the \n-v\n flag, like so:\n\n\n$ cat examples/commit-message-2 | gitlint -v\n1: T1\n1: T2\n[removed output]\n$ cat examples/commit-message-2 | gitlint -vv\n1: T1 Title exceeds max length (134\n80)\n1: T2 Title has trailing whitespace\n1: T4 Title contains hard tab characters (\\t)\n[removed output]\n$ cat examples/commit-message-2 | gitlint -vvv\n1: T1 Title exceeds max length (134\n80): \nThis is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping  \n\n1: T2 Title has trailing whitespace: \nThis is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping  \n\n[removed output]\n\n\n\n\nThe default verbosity is \n-vvv\n.\n\n\nOther commands and variations:\n\n\nUsage: gitlint [OPTIONS]\n\n  Git lint tool, checks your git commit messages for styling issues\n\nOptions:\n  --install-hook     Install gitlint as a git commit-msg hook\n  --uninstall-hook   Uninstall gitlint commit-msg hook\n  -C, --config PATH  Config file location (default: .gitlint).\n  -c TEXT            Config flags in format \nrule\n.\noption\n=\nvalue\n (e.g.: -c\n                     T1.line-length=80). Flag can be used multiple times to\n                     set multiple config values.\n  --ignore TEXT      Ignore rules (comma-separated by id or name).\n  -v, --verbose      Verbosity, more v's for more verbose output (e.g.: -v,\n                     -vv, -vvv). Default: -vvv\n  -s, --silent       Silent mode (no output). Takes precedence over -v, -vv,\n                     -vvv.\n  --version          Show the version and exit.\n  --help             Show this message and exit.\n\n\n\n\nUsing gitlint as a commit-msg hook\n\n\nYou can also install gitlint as a git \ncommit-msg\n hook so that gitlint checks your commit messages automatically\nafter each commit.\n\n\ngitlint --install-hook\n# To remove the hook\ngitlint --uninstall-hook\n\n\n\n\nImportant: Gitlint cannot work together with an existing hook. If you already have a \n.git/hooks/commit-msg\n\nfile in your local repository, gitlint will refuse to install the \ncommit-msg\n hook. gitlint will also only\nuninstall unmodified commit-msg hooks that were installed by gitlint.\n\n\nExit codes\n\n\nGitlint uses the exit code as a simple way to indicate the number of violations found.\nSome exit codes are used to indicate special errors as indicated in the table below.\n\n\nBecause of these special error codes and the fact that\n\nbash only supports exit codes between 0 and 255\n, the maximum number\nof violations counted by the exit code is 252. Note that gitlint does not have a limit on the number of violations\nit can detect, it will just always return with exit code 252 when the number of violations is greater than or equal\nto 252.\n\n\n\n\n\n\n\n\nExit Code\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n253\n\n\nWrong invocation of the \ngitlint\n command.\n\n\n\n\n\n\n254\n\n\nSomething went wrong when invoking git.\n\n\n\n\n\n\n255\n\n\nInvalid gitlint configuration", 
            "title": "Home"
        }, 
        {
            "location": "/#intro", 
            "text": "Gitlint is a git commit message linter written in python: it checks your commit messages for style.  Great for use as a  commit-msg  git hook or as part of your gating script in a CI/CD pipeline (e.g. jenkins).   Many of the gitlint validations are based on well-known , community , standards , others are based on checks that we've found\nuseful throughout the years. Gitlint has sane defaults, but you can also easily customize it to your own liking.  If you are looking for an alternative written in Ruby, have a look at fit-commit .", 
            "title": "Intro"
        }, 
        {
            "location": "/#getting-started", 
            "text": "# Install gitlint\npip install gitlint\n\n# Check the last commit message\ngitlint\n# Alternatively, pipe a commit message to gitlint:\ncat examples/commit-message-1 | gitlint\n# or\ngit log -1 --pretty=%B | gitlint\n\n# To install a gitlint as a commit-msg git hook:\ngitlint --install-hook  Output example:  $ cat examples/commit-message-2 | gitlint\n1: T1 Title exceeds max length (134 80):  This is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping   \n1: T2 Title has trailing whitespace:  This is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping   \n1: T4 Title contains hard tab characters (\\t):  This is the title of a commit message that  is over 80 characters and contains hard tabs and trailing whitespace and the word wiping   \n2: B4 Second line is not empty:  This line should not contain text \n3: B1 Line exceeds max length (125 80):  Lines typically need to have   a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120.  \n3: B2 Line has trailing whitespace:  Lines typically need to have   a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120.  \n3: B3 Line contains hard tab characters (\\t):  Lines typically need to have     a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120.    NOTE: The returned exit code equals the number of errors found.  Some exit codes are special .  You can modify verbosity using the  -v  flag, like so:  $ cat examples/commit-message-2 | gitlint -v\n1: T1\n1: T2\n[removed output]\n$ cat examples/commit-message-2 | gitlint -vv\n1: T1 Title exceeds max length (134 80)\n1: T2 Title has trailing whitespace\n1: T4 Title contains hard tab characters (\\t)\n[removed output]\n$ cat examples/commit-message-2 | gitlint -vvv\n1: T1 Title exceeds max length (134 80):  This is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping   \n1: T2 Title has trailing whitespace:  This is the title of a commit message that    is over 80 characters and contains hard tabs and trailing whitespace and the word wiping   \n[removed output]  The default verbosity is  -vvv .  Other commands and variations:  Usage: gitlint [OPTIONS]\n\n  Git lint tool, checks your git commit messages for styling issues\n\nOptions:\n  --install-hook     Install gitlint as a git commit-msg hook\n  --uninstall-hook   Uninstall gitlint commit-msg hook\n  -C, --config PATH  Config file location (default: .gitlint).\n  -c TEXT            Config flags in format  rule . option = value  (e.g.: -c\n                     T1.line-length=80). Flag can be used multiple times to\n                     set multiple config values.\n  --ignore TEXT      Ignore rules (comma-separated by id or name).\n  -v, --verbose      Verbosity, more v's for more verbose output (e.g.: -v,\n                     -vv, -vvv). Default: -vvv\n  -s, --silent       Silent mode (no output). Takes precedence over -v, -vv,\n                     -vvv.\n  --version          Show the version and exit.\n  --help             Show this message and exit.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#using-gitlint-as-a-commit-msg-hook", 
            "text": "You can also install gitlint as a git  commit-msg  hook so that gitlint checks your commit messages automatically\nafter each commit.  gitlint --install-hook\n# To remove the hook\ngitlint --uninstall-hook  Important: Gitlint cannot work together with an existing hook. If you already have a  .git/hooks/commit-msg \nfile in your local repository, gitlint will refuse to install the  commit-msg  hook. gitlint will also only\nuninstall unmodified commit-msg hooks that were installed by gitlint.", 
            "title": "Using gitlint as a commit-msg hook"
        }, 
        {
            "location": "/#exit-codes", 
            "text": "Gitlint uses the exit code as a simple way to indicate the number of violations found.\nSome exit codes are used to indicate special errors as indicated in the table below.  Because of these special error codes and the fact that bash only supports exit codes between 0 and 255 , the maximum number\nof violations counted by the exit code is 252. Note that gitlint does not have a limit on the number of violations\nit can detect, it will just always return with exit code 252 when the number of violations is greater than or equal\nto 252.     Exit Code  Description      253  Wrong invocation of the  gitlint  command.    254  Something went wrong when invoking git.    255  Invalid gitlint configuration", 
            "title": "Exit codes"
        }, 
        {
            "location": "/rules/", 
            "text": "Overview\n\n\n\n\n\n\n\n\nID\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nT1\n\n\ntitle-max-length\n\n\nTitle length must be \n 72 chars.\n\n\n\n\n\n\nT2\n\n\ntitle-trailing-whitespace\n\n\nTitle cannot have trailing whitespace (space or tab)\n\n\n\n\n\n\nT3\n\n\ntitle-trailing-punctuation\n\n\nTitle cannot have trailing punctuation (?:!.,;)\n\n\n\n\n\n\nT4\n\n\ntitle-hard-tab\n\n\nTitle cannot contain hard tab characters (\\t)\n\n\n\n\n\n\nT5\n\n\ntitle-must-not-contain-word\n\n\nTitle cannot contain certain words (default: \"WIP\")\n\n\n\n\n\n\nT6\n\n\ntitle-leading-whitespace\n\n\nTitle cannot have leading whitespace (space or tab)\n\n\n\n\n\n\nT7\n\n\ntitle-match-regex\n\n\nTitle must match a given regex (default: .*)\n\n\n\n\n\n\nB1\n\n\nbody-max-line-length\n\n\nLines in the body must be \n 80 chars\n\n\n\n\n\n\nB2\n\n\nbody-trailing-whitespace\n\n\nBody cannot have trailing whitespace (space or tab)\n\n\n\n\n\n\nB3\n\n\nbody-hard-tab\n\n\nBody cannot contain hard tab characters (\\t)\n\n\n\n\n\n\nB4\n\n\nbody-first-line-empty\n\n\nFirst line of the body (second line of commit message) must be empty\n\n\n\n\n\n\nB5\n\n\nbody-min-length\n\n\nBody length must be at least 20 characters\n\n\n\n\n\n\nB6\n\n\nbody-is-missing\n\n\nBody message must be specified\n\n\n\n\n\n\nB7\n\n\nbody-changed-file-mention\n\n\nBody must contain references to certain files if those files are changed in the last commit", 
            "title": "Rules"
        }, 
        {
            "location": "/rules/#overview", 
            "text": "ID  Name  Description      T1  title-max-length  Title length must be   72 chars.    T2  title-trailing-whitespace  Title cannot have trailing whitespace (space or tab)    T3  title-trailing-punctuation  Title cannot have trailing punctuation (?:!.,;)    T4  title-hard-tab  Title cannot contain hard tab characters (\\t)    T5  title-must-not-contain-word  Title cannot contain certain words (default: \"WIP\")    T6  title-leading-whitespace  Title cannot have leading whitespace (space or tab)    T7  title-match-regex  Title must match a given regex (default: .*)    B1  body-max-line-length  Lines in the body must be   80 chars    B2  body-trailing-whitespace  Body cannot have trailing whitespace (space or tab)    B3  body-hard-tab  Body cannot contain hard tab characters (\\t)    B4  body-first-line-empty  First line of the body (second line of commit message) must be empty    B5  body-min-length  Body length must be at least 20 characters    B6  body-is-missing  Body message must be specified    B7  body-changed-file-mention  Body must contain references to certain files if those files are changed in the last commit", 
            "title": "Overview"
        }, 
        {
            "location": "/configuration/", 
            "text": "Config files\n\n\nYou can modify gitlint's behavior by specifying a config file like so: \n\n\ngitlint --config myconfigfile.ini \n\n\n\n\nBy default, gitlint will look for an optional \n.gitlint\n config file.\n\n\n# All these sections are optional, edit this file as you like.\n[general]\nignore=title-trailing-punctuation, T3\n# verbosity should be a value between 1 and 3, the commandline -v flags take precedence over\n# this\nverbosity = 2\n\n[title-max-length]\nline-length=20\n\n[title-must-not-contain-word]\n# Comma-separated list of words that should not occur in the title. Matching is case\n# insensitive. It's fine if the keyword occurs as part of a larger word (so \nWIPING\n\n# will not cause a violation, but \nWIP: my title\n will.\nwords=wip,title\n\n[title-match-regex]\n# python like regex (https://docs.python.org/2/library/re.html) that the\n# commit-msg title must be matched to.\n# Note that the regex can contradict with other rules if not used correctly\n# (e.g. title-must-not-contain-word).\nregex=^US[0-9]*\n\n[B1]\n# B1 = body-max-line-length\nline-length=30\n\n[body-min-length]\nmin-length=5\n\n[body-is-missing]\n# Whether to ignore this rule on merge commits (which typically only have a title)\n# default = True\nignore-merge-commits=false\n\n[body-changed-file-mention]\n# List of files that need to be explicitly mentioned in the body when they are changed\n# This is useful for when developers often erroneously edit certain files or git submodules.\n# By specifying this rule, developers can only change the file when they explicitly reference\n# it in the commit message.\nfiles=gitlint/rules.py,README.md\n\n\n\n\nCommandline config\n\n\nAlternatively, you can use one or more \n-c\n flags like so:\n\n\n$ gitlint -c general.verbosity=2 -c title-max-length.line-length=80 -c B1.line-length=100\n\n\n\n\nThe generic config flag format is \n-c \nrule\n.\noption\n=\nvalue\n and supports all the same rules and options which \nyou can also use in a \n.gitlint\n config file.\n\n\nFinally, you can also disable gitlint for specific commit messages by adding \ngitlint-ignore: all\n to the commit\nmessage like so:\n\n\nWIP: This is my commit message\n\nI want gitlint to ignore this entire commit message.\ngitlint-ignore: all\n\n\n\n\ngitlint-ignore: all\n can occur on any line, as long as it is at the start of the line. You can also specify\nspecific rules to be ignored as follows: \ngitlint-ignore: T1, body-hard-tab\n.\n\n\nConfiguration precedence\n\n\nConfiguring gitlint happens the following order of precedence:\n\n\n\n\nCommit specific config (e.g.: \ngitlint-ignore: all\n in the commit message) \n\n\nCommandline convenience flags (e.g.:  \n-vv\n, \n--silent\n, \n--ignore\n)\n\n\nCommandline configuration flags (e.g.: \n-c title-max-length=123\n)\n\n\nConfiguration file (local \n.gitlint\n file, or file specified using \n-C\n/\n--config\n)\n\n\nDefault gitlint config", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#config-files", 
            "text": "You can modify gitlint's behavior by specifying a config file like so:   gitlint --config myconfigfile.ini   By default, gitlint will look for an optional  .gitlint  config file.  # All these sections are optional, edit this file as you like.\n[general]\nignore=title-trailing-punctuation, T3\n# verbosity should be a value between 1 and 3, the commandline -v flags take precedence over\n# this\nverbosity = 2\n\n[title-max-length]\nline-length=20\n\n[title-must-not-contain-word]\n# Comma-separated list of words that should not occur in the title. Matching is case\n# insensitive. It's fine if the keyword occurs as part of a larger word (so  WIPING \n# will not cause a violation, but  WIP: my title  will.\nwords=wip,title\n\n[title-match-regex]\n# python like regex (https://docs.python.org/2/library/re.html) that the\n# commit-msg title must be matched to.\n# Note that the regex can contradict with other rules if not used correctly\n# (e.g. title-must-not-contain-word).\nregex=^US[0-9]*\n\n[B1]\n# B1 = body-max-line-length\nline-length=30\n\n[body-min-length]\nmin-length=5\n\n[body-is-missing]\n# Whether to ignore this rule on merge commits (which typically only have a title)\n# default = True\nignore-merge-commits=false\n\n[body-changed-file-mention]\n# List of files that need to be explicitly mentioned in the body when they are changed\n# This is useful for when developers often erroneously edit certain files or git submodules.\n# By specifying this rule, developers can only change the file when they explicitly reference\n# it in the commit message.\nfiles=gitlint/rules.py,README.md", 
            "title": "Config files"
        }, 
        {
            "location": "/configuration/#commandline-config", 
            "text": "Alternatively, you can use one or more  -c  flags like so:  $ gitlint -c general.verbosity=2 -c title-max-length.line-length=80 -c B1.line-length=100  The generic config flag format is  -c  rule . option = value  and supports all the same rules and options which \nyou can also use in a  .gitlint  config file.  Finally, you can also disable gitlint for specific commit messages by adding  gitlint-ignore: all  to the commit\nmessage like so:  WIP: This is my commit message\n\nI want gitlint to ignore this entire commit message.\ngitlint-ignore: all  gitlint-ignore: all  can occur on any line, as long as it is at the start of the line. You can also specify\nspecific rules to be ignored as follows:  gitlint-ignore: T1, body-hard-tab .", 
            "title": "Commandline config"
        }, 
        {
            "location": "/configuration/#configuration-precedence", 
            "text": "Configuring gitlint happens the following order of precedence:   Commit specific config (e.g.:  gitlint-ignore: all  in the commit message)   Commandline convenience flags (e.g.:   -vv ,  --silent ,  --ignore )  Commandline configuration flags (e.g.:  -c title-max-length=123 )  Configuration file (local  .gitlint  file, or file specified using  -C / --config )  Default gitlint config", 
            "title": "Configuration precedence"
        }, 
        {
            "location": "/contributing/", 
            "text": "We'd love for you to contribute to gitlint. Just open a pull request and we'll get right on it! \nYou can find a wishlist below, but we're open to any suggestions you might have!\n\n\nDevelopment\n\n\nThere is a Vagrantfile in this repository that can be used for development.\n\n\nvagrant up\nvagrant ssh\n\n\n\n\nOr you can choose to use your local environment:\n\n\nvirtualenv .venv\npip install -r requirements.txt -r test-requirements.txt -r doc-requirements.txt\npython setup.py develop\n\n\n\n\nTo run tests:\n\n\n./run_tests.sh                       # run unit tests and print test coverage\n./run_tests.sh --no-coverage         # run unit tests without test coverage\n./run_tests.sh --pep8                # pep8 checks\n./run_tests.sh --stats               # print some code stats\n\n\n\n\nTo see the package description in HTML format\n\n\npip install docutils\nexport LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\npython setup.py --long-description | rst2html.py \n output.html\n\n\n\n\nDocumentation\n\n\nmkdocs serve", 
            "title": "Contributing"
        }
    ]
}