#!/bin/sh
### gitlint commit-msg hook start ###

# Determine whether we have a tty available by trying to access it.
# This allows us to deal with UI based gitclient's like Atlassian SourceTree.
# NOTE: "exec < /dev/tty" sets stdin to the keyboard
stdin_available=1
(exec < /dev/tty) 2> /dev/null || stdin_available=0

if [ $stdin_available -eq 1 ]; then
    # Set bash color codes in case we have a tty
    RED="\033[31m"
    YELLOW="\033[33m"
    GREEN="\033[32m"
    END_COLOR="\033[0m"

    # Now that we know we have a functional tty, set stdin to it so we can ask the user questions :-)
    exec < /dev/tty
else
    # If we don't have a tty, and if ~/.bash_profile exists, source it
    # This *should* solve any cases of Atlassian SourceTree not finding gitlint on OS X.
    # More info: https://answers.atlassian.com/questions/140339/sourcetree-hook-failing-because-paths-don-t-seem-to-be-set-correctly
    test -f ~/.bash_profile && source ~/.bash_profile

    # Unset bash colors if we don't have a tty
    RED=""
    YELLOW=""
    GREEN=""
    END_COLOR=""
fi

echo "gitlint: checking commit message..."
cat "$1" | gitlint
gitlint_exit_code=$?

# Prompts a given yes/no question.
# Returns 0 if user answers yes, 1 if no
# Reprompts if different answer
ask_yes_no(){
    # If we don't have a stdin available, then just return "No".
    if [ $stdin_available -eq 0 ]; then
        return 1;
    fi
    # Otherwise, ask the question until the user answers yes or no
    question="$1"
    while true; do
        read -p "$question" yn
        case $yn in
             [Yy]* ) return 0;;
             [Nn]* ) return 1;;
        esac
    done
}

if [ $gitlint_exit_code -gt 0 ]; then
    echo "-----------------------------------------------"
    echo "gitlint: ${RED}Your commit message contains the above violations.${END_COLOR}"
    cat "$1" > "${1}_gitlint_restore"
    # cat "$1" | grep -v '^#'
    if ask_yes_no "Continue with commit anyways (this keeps the current commit message)? [y/n] "; then
        exit 0
    else
        echo "Commit aborted"
    fi
    exit $gitlint_exit_code
else
    echo "gitlint: ${GREEN}OK${END_COLOR} (no violations in commit message)"
fi

### gitlint commit-msg hook end ###
